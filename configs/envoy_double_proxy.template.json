{% macro listener(address,ssl,proxy_proto) %}
  {
    "address": {{ address }},
    {% if ssl -%}
    "ssl_context": {
      "alpn_protocols": "h2,http/1.1",
      "alt_alpn_protocols": "http/1.1",
      "cert_chain_file": "/etc/envoy/cert.pem",
      "private_key_file": "/etc/envoy/key.pem"
    },
    {% endif -%}
    {% if proxy_proto -%}
    "use_proxy_proto": true,
    {% endif -%}
    "filters": [
    {
      "type": "read",
      "name": "http_connection_manager",
      "config": {
        "codec_type": "auto",
        "tracing": {
          "operation_name": "ingress"
        },
        "idle_timeout_s": 840,
        "access_log": [
        {
          "path": "/var/log/envoy/access_error.log",
          "filter": {"type": "logical_or", "filters": [
              {"type": "status_code", "op": ">=", "value": 500},
              {"type": "duration", "op": ">=", "value": 1000},
              {"type": "traceable_request"}
            ]
          }
        },
        {
          "path": "/var/log/envoy/access.log"
        }],
        "stat_prefix": "router",
        {% if proxy_proto -%}
        "use_remote_address": true,
        {% endif -%}
        "route_config":
        {
          "virtual_hosts": [
            {
              "name": "all",
              "domains": ["*"],
              "routes": [
                {
                  "prefix": "/",
                  "cluster": "backhaul",
                  {# Generally allow front proxy to control timeout and use this as a backstop #}
                  "timeout_ms": 20000
                }
              ]
            }
          ]
        },
        "filters": [
          { "type": "both", "name": "health_check",
            "config": {
              "pass_through_mode": false, "endpoint": "/healthcheck"
            }
          },
          { "type": "decoder", "name": "buffer",
            "config": {
              "max_request_bytes": 5242880,
              "max_request_time_s": 120
            }
          },
          { "type": "decoder", "name": "router", "config": {} }
        ]
      }
    }]
  }
{% endmacro %}

{
  "listeners": [
    {# TCP listener for external port 443 (SSL). Assumes a TCP LB in front such as ELB which
       supports proxy proto. #}
    {{ listener("tcp://127.0.0.1:9300",True,True) }},

    {# TCP listener for external port 80 (non-SSL). Assumes a TCP LB in front such as ELB which
       supports proxy proto. #}
    {{ listener("tcp://127.0.0.1:9301",False,True) }}
  ],

  "admin": { "access_log_path": "/var/log/envoy/admin_access.log",
             "tcp://127.0.0.1:9901" },
  "flags_path": "/etc/envoy/flags",
  "statsd_tcp_cluster_name": "statsd",

  "tracing": {
    "http": {
      "driver": {
          "type": "lightstep",
          "access_token_file": "/etc/envoy/lightstep_access_token",
          "config": {
            "collector_cluster": "lightstep_saas"
          }
      }
    }
  },

  "runtime": {
    "symlink_root": "/srv/runtime_data/current",
    "subdirectory": "envoy",
    "override_subdirectory": "envoy_override"
  },

  "cluster_manager": {
    "clusters": [
    {
      "name": "statsd",
      "connect_timeout_ms": 250,
      "type": "static",
      "lb_type": "round_robin",
      "hosts": [{"url": "tcp://127.0.0.1:8125"}]
    },
    {
      "name": "backhaul",
      "connect_timeout_ms": 1000,
      "type": "strict_dns",
      "lb_type": "round_robin",
      "features": "http2",
      "max_requests_per_connection": 25000, {# There are so few connections going back
                                               that we can get some imbalance. Until we can come
                                               up with a better solution just limit the requests
                                               so we can cycle and get better spread. #}
      "ssl_context": {
        "cert_chain_file": "/etc/envoy/envoy-double-proxy.pem",
        "private_key_file": "/etc/envoy/envoy-double-proxy.key",
        "verify_subject_alt_name": ["front-proxy.yourcompany.net"]
      },
      "hosts": [{"url": "tcp://front-proxy.yourcompany.net:9400"}]
    },
    {
      "name": "lightstep_saas",
      "features": "http2",
      "ssl_context": {
        "ca_cert_file": "/etc/ssl/certs/ca-certificates.crt",
        "verify_subject_alt_name": ["collector-grpc.lightstep.com"]
      },
      "connect_timeout_ms": 1000,
      "type": "logical_dns",
      "lb_type": "round_robin",
      "hosts": [{"url": "tcp://collector-grpc.lightstep.com:443"}]
    }
    ]
  }
}
